[{"title":"","date":"2017-04-09T01:21:51.288Z","path":"2017/04/09/mysql-study-notes/","text":"title: Mysql study notesdate: 2017-02-21 21:07:35tags: mysql categories:BasicInstall in Linux（centos7）Under root account，run yum insatll mariadb-server mariadb 是mysql的一个分支，新版本的Linux以mariadb代替mysql，语法基本一样。 Database：a collection of data stored in some organized fashion 数据库软件是DBMS，里面存储的文件是database. Table : a sturctured list of data of a specific typeprimary keys : 主键，唯一、不允许修改或更新、不能重用。SQL：structured query language.Comment ： --，#，/* */Use ? commandname to query manpage.Log in : mysql -h hostname -u username -p + Enter, then input password.SQL statements are not case sensitive, but database and table names can be.command ends with a semicolon ;.Choose the right database : use databasename;Createcreate databases : create database databasename;create tables : create table tablename (column_name column_type);Example:123456create table customers( customerid int unsigned not null auto_increment primary key,name char(50) not null,address char(100) not null,city char(30) not null); auto_increment :you can leave that field blank or NULL when inserting rows into the table, MySQL will automatically generate a unique identifier value.The value will be one greater than the maximum value in the column already.You can have only one of these in each table.Columns that specify AUTO_INCREMENT must be indexed. Operations and privileges on usersgrant12345GRANT privileges [columns]ON itemTO user_name [IDENTIFIED BY ‘password’][REQUIRE ssl_options][WITH [GRANT OPTION | limit_options] ] 1234mysql&gt; grant all-&gt; on *-&gt; to fred identified by ‘mnb123’-&gt; with grant option; grant option,make the specified user has privilege to grant to other user. revoke12mysql&gt; revoke all privileges, grant option-&gt; from fred; Show and Describeshow databases; show tablename; describe tablename;Column data typeNumeric Types ： Integral Data Types，Floating-Point Data TypesDate and Time Types ： Date and Time Data Types，TIMESTAMP Display TypesString Types ： Regular String Types，TEXT and BLOB TypesInsertExample ：12INSERT [INTO] table [(column1, column2, column3,...)] VALUES(value1, value2, value3,...); or1234insert into customers values(NULL, &apos;Julie Smith&apos;, &apos;25 Oak Street&apos;, &apos;Airport West&apos;);``` ### Select SELECT [options] items[INTO file_details]FROM tables[ WHERE conditions ][ GROUP BY group_type ][ HAVING where_definition ] –for group data[ ORDER BY order_type ][LIMIT limit_criteria ][PROCEDURE proc_name(arguments)][lock_options]12#### Useful Comparison Operators for WHERE Clauses Example : =,&gt;,&lt;,!=address is not nulladdress is nullamount between 0 and 60.00city in (“Carlton”, “Moe”)city not in (“Carlton”, ”Moe”)name like (“Fred %”)name not like (“Fred %”)name regexp123#### Retrieving Data from Multiple Tables ##### Simple Two-Table JoinsExample ： select orders.orderid, orders.amount, orders.datefrom customers, ordersJOINwhere customers.name = ‘Julie Smith’and customers.customerid = orders.customerid;1234&gt;* Comma between the names of the tables is equivalent to typing INNER JOIN or CROSS##### Joining More Than Two TablesExample ： select customers.namefrom customers, orders, order_items, bookswhere customers.customerid = orders.customeridand orders.orderid = order_items.orderidand order_items.isbn = books.isbnand books.title like ‘%Java%’;12345&gt;* A total of join conditions one less than the total number of tables. ##### Finding Rows That Don’t Match : left joinExample ： select customers.customerid, customers.namefrom customers left join orders/ or： on customers.customerid = orders.customerid/using (customerid)where orders.orderid is null;12##### Using Other Names for Tables: Aliases ### Update UPDATE [LOW_PRIORITY] [IGNORE] tablenameSET column1=expression1,column2=expression2,…[WHERE condition][ORDER BY order_criteria][LIMIT number]1### Alter alter table customersmodify name char(70) not null;123```alter table ordersadd tax float(6,2) after amount; 1234alter table ordersdrop tax;``` ### Deleting Records from the Database delete from customerswhere customerid=5;1234567891011### Drop `DROP TABLE table;`&gt;* 更新和删除：需非常小心，用上WHERE ## Advanced ### View 视图视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。`CREATE VIEW viewname``DROP VIEW viewname;`### PROCEDURE 存储过程&gt;* 一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程带有参数）来调用执行它。 mysql&gt; DELIMITER //mysql&gt; CREATE PROCEDURE proc1(OUT s int) -&gt; BEGIN -&gt; SELECT COUNT(*) INTO s FROM user; -&gt; END -&gt; //mysql&gt; DELIMITER ;1234567891011121314151617181920212223242526&gt;* 注：delimiter //一般情况下MYSQL以；结尾表示确认输入并执行语句，但在存储过程中；不是表示结束，因此可以用该命令将；号改为//表示确认输入并执行。（1）这里需要注意的是DELIMITER//和DELIMITER;两句，DELIMITER是分割符的意思，因为MySQL默认以&quot;;&quot;为分隔符，如果我们没有声明分割符，那么编译器会把存储过程当成SQL语句进行处理，则存储过程的编译过程会报错，所以要事先用DELIMITER关键字申明当前段分隔符，这样MySQL才会将&quot;;&quot;当做存储过程中的代码，不会执行这些代码，用完了之后要把分隔符还原。（2）存储过程根据需要可能会有输入、输出、输入输出参数，这里有一个输出参数s，类型是int型，如果有多个参数用&quot;,&quot;分割开。（3）过程体的开始与结束使用BEGIN与END进行标识。参数MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：`CREATE PROCEDURE([[IN |OUT |INOUT ] 参数名 数据类形...])`IN 输入参数:表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值;OUT 输出参数:该值可在存储过程内部被改变，并可返回;INOUT 输入输出参数:调用时指定，并且可被改变和返回; ### Transaction 事务处理&gt;* 事务处理是一种机制，用来管理必须成批执行的SQL操作，保证数据库不包含不完整的操作结果。利用事务处理，可以保证一组操作不会中途停止，它们要么完全执行,要么完全不执行（除非明确指示）。如果没有错误发生，整组语句提交给（写到）数据库表；如果发生错误，则进行回退(撤销）将数据库恢复到某个已知且安全的状态。如果打算使用MySQL事务编程，那么就需要一种特殊的方式创建表。有很多支持事务但最流行的是InnoDB表类型。MySQL默认操作模式就是autocommit自动提交模式。这就表示除非显式地开始一个事务，否则每个查询都被当做一个单独的事务自动执行。我们可以通过设置autocommit的值改变是否是自动提交autocommit模式。 Example ： &gt;* 需求说明：案例背景:银行的转账过程中，发生意外是在所难免。为了避免意外而造成不必要的损失，使用事务处理的方式进行处理：A账户现有余额1000元，向余额为200的B账户进行转账500元。可能由于某原因： A账户在扣除转账金额时发生错误，使用事务回滚来返回到初始状态A账户成功扣除转账金额后，B账户添加转账金额发生错误，使用事务回滚到初始状态提示：先建数据表account，字段包括姓名(username)、余额（money），再分别利用事务处理以上两种情况。##### 创建账户表 CREATE TABLE IF NOT EXISTS account( id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY, username VARCHAR(32) NOT NULL, money DECIMAL(9,2)) ENGINE=INNODB;1##### 插入用户数据 INSERT INTO account(username,money)VALUES(‘A’,1000.00);INSERT INTO account(username,money)VALUES(‘B’,200.00);``` 事务处理 A账户汇款失败 SELECT * FROM account;第一步 关闭事务自动提交模式SET autocommit=0;第二步 开始事务START TRANSACTION;第三步 发现汇款失败，将事务回滚ROLLBACK || 汇款成功将事件commit假设语法错误UPDATE account SET money=money-500 WHERE username=&#39;A&#39;;SELECT * FROM account;UPDATE account SET money=money+200 WHERE username=&#39;B&#39;;ROLLBACK;第四步 还原Mysql数据库的的自动提交SET autocommit=1;SELECT * FROM account; B接收汇款失败SELECT *FROM account；SET autocommit =0;START TRANSACTION;UPDATE account SET money=money-500 WHERE username=&#39;A&#39;;SELECT * FROM account ;假设语法错误UPDATE account SET money=money+200 WHERE username =&#39;B&#39;;ROLLBACK;SET autocommit =1;SELECT * FROM account; 清除数据TRUNCATE account;","tags":[]},{"title":"Git study notes","date":"2017-01-18T23:27:38.000Z","path":"2017/01/19/gitlearn/","text":"From Tutorial安装Git Centos系统：yum install git-core 安装后配置: git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot; 创建版本库（repository） 创建空目录：mkdir dirname 转到该目录: cd dirname 初始化版本库：git init（在版本库下生成.git目录，用来追踪管理版本库 添加文件到版本库：git add &lt;filename&gt; //添加git commit -m &quot;说明的文字&quot;//提交 时光机穿梭版本回退 git status, git diff git log (可以加上--pretty=oneline参数） git reset --hard commit_id（退回相应版本） git reflog查看命令历史 HEAD指向的版本就是当前版本 工作区和暂存区 git add 添加到暂存区（stage) git commit提交到HEAD，成为当前版本 管理修改 git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别 撤销修改 丢弃工作区的修改：git checkout -- file 已经add到暂存区：1. git reset HEAD file 2.执行上面的步骤 已经提交：使用版本退回 删除文件 rm test.txt git rm test.txt git commit -m &quot;remove test.txt&quot; 撤销:git checkout -- test.txt 远程仓库创建SSH key ssh-keygen -t rsa -C &quot;youremail@example.com&quot; .ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人 登陆GitHub，打开“Account settings”，“SSH Keys”页面 点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容 添加远程库 git remote add origin xxx.git git push -u origin master(-u 关联） git push origin master 从远程库克隆 git clone git@github.com:michaelliao/gitskills.git 还可以用https://github.com/michaelliao/gitskills.git这样的地址 分支管理创建与合并分支 查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt; 解决冲突 查看、修改文件内容:Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容 git log --graph --pretty=oneline --abbrev-commit（查看分支合并情况） 分支管理策略 合并分支时Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息 git merge --no-ff -m &quot;merge with no-ff&quot; dev master用来发布版本，dev用来干活 Bug分支 git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场 Feature分支 要丢弃一个没有被合并过的分支，可以通过git branch -D &lt;name&gt;强行删除 多人协作 查看远程库信息：git remote -v 在本地创建和远程分支对应的分支：git checkout -b branch-name origin/branch-name（关联了分支） 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name 标签管理创建标签 命令git tag &lt;name&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id； git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息； git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;可以用PGP签名标签； 命令git tag可以查看所有标签。 操作标签 命令git push origin &lt;tagname&gt;可以推送一个本地标签； 命令git push origin --tags可以推送全部未推送过的本地标签； 命令git tag -d &lt;tagname&gt;可以删除一个本地标签； 命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签 使用GitHub 在GitHub上，可以任意Fork开源仓库； 自己拥有Fork后的仓库的读写权限； 可以推送pull request给官方仓库来贡献代码 自定义Git 显示颜色:$ git config --global color.ui true 忽略特殊文件:忽略某些文件时，需要编写.gitignore；.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理 配置别名:git config --global alias.st status 搭建Git服务器","tags":[{"name":"git","slug":"git","permalink":"http://hubqin.github.io/tags/git/"}]},{"title":"Hello World","date":"2017-01-10T02:12:36.000Z","path":"2017/01/10/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]