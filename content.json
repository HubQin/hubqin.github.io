[{"title":"Git study notes","date":"2017-01-18T23:27:38.000Z","path":"2017/01/19/gitlearn/","text":"From Tutorial安装Git Centos系统：yum install git-core 安装后配置: git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot; 创建版本库（repository） 创建空目录：mkdir dirname 转到该目录: cd dirname 初始化版本库：git init（在版本库下生成.git目录，用来追踪管理版本库 添加文件到版本库：git add &lt;filename&gt; //添加git commit -m &quot;说明的文字&quot;//提交 时光机穿梭版本回退 git status, git diff git log (可以加上--pretty=oneline参数） git reset --hard commit_id（退回相应版本） git reflog查看命令历史 HEAD指向的版本就是当前版本 工作区和暂存区 git add 添加到暂存区（stage) git commit提交到HEAD，成为当前版本 管理修改 git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别 撤销修改 丢弃工作区的修改：git checkout -- file 已经add到暂存区：1. git reset HEAD file 2.执行上面的步骤 已经提交：使用版本退回 删除文件 rm test.txt git rm test.txt git commit -m &quot;remove test.txt&quot; 撤销:git checkout -- test.txt 远程仓库创建SSH key ssh-keygen -t rsa -C &quot;youremail@example.com&quot; .ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人 登陆GitHub，打开“Account settings”，“SSH Keys”页面 点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容 添加远程库 git remote add origin xxx.git git push -u origin master(-u 关联） git push origin master 从远程库克隆 git clone git@github.com:michaelliao/gitskills.git 还可以用https://github.com/michaelliao/gitskills.git这样的地址 分支管理创建与合并分支 查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt; 解决冲突 查看、修改文件内容:Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容 git log --graph --pretty=oneline --abbrev-commit（查看分支合并情况） 分支管理策略 合并分支时Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息 git merge --no-ff -m &quot;merge with no-ff&quot; dev master用来发布版本，dev用来干活 Bug分支 git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场 Feature分支 要丢弃一个没有被合并过的分支，可以通过git branch -D &lt;name&gt;强行删除 多人协作 查看远程库信息：git remote -v 在本地创建和远程分支对应的分支：git checkout -b branch-name origin/branch-name（关联了分支） 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name 标签管理创建标签 命令git tag &lt;name&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id； git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息； git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;可以用PGP签名标签； 命令git tag可以查看所有标签。 操作标签 命令git push origin &lt;tagname&gt;可以推送一个本地标签； 命令git push origin --tags可以推送全部未推送过的本地标签； 命令git tag -d &lt;tagname&gt;可以删除一个本地标签； 命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签 使用GitHub 在GitHub上，可以任意Fork开源仓库； 自己拥有Fork后的仓库的读写权限； 可以推送pull request给官方仓库来贡献代码 自定义Git 显示颜色:$ git config --global color.ui true 忽略特殊文件:忽略某些文件时，需要编写.gitignore；.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理 配置别名:git config --global alias.st status 搭建Git服务器","tags":[{"name":"git","slug":"git","permalink":"http://hubqin.github.io/tags/git/"}]},{"title":"Hello World","date":"2017-01-10T02:12:36.000Z","path":"2017/01/10/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]